// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin 0.8.0
// 	protoc               v4.25.1
// source: interop.proto

package interop

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Define message types
type MessageType int32

const (
	MessageType_DEFAULT              MessageType = 0
	MessageType_INITIALIZE           MessageType = 1
	MessageType_UNKNOWN_REQUEST      MessageType = 2
	MessageType_ICON_REQUEST         MessageType = 3
	MessageType_NAME_REQUEST         MessageType = 4
	MessageType_DESCRIPTION_REQUEST  MessageType = 5
	MessageType_CONTENT_REQUEST      MessageType = 6
	MessageType_DATA_PROCESS_REQUEST MessageType = 7
	MessageType_SIGN_DATA_REQUEST    MessageType = 8
)

// Enum value maps for MessageType.
var (
	MessageType_name = map[int32]string{
		0: "DEFAULT",
		1: "INITIALIZE",
		2: "UNKNOWN_REQUEST",
		3: "ICON_REQUEST",
		4: "NAME_REQUEST",
		5: "DESCRIPTION_REQUEST",
		6: "CONTENT_REQUEST",
		7: "DATA_PROCESS_REQUEST",
		8: "SIGN_DATA_REQUEST",
	}
	MessageType_value = map[string]int32{
		"DEFAULT":              0,
		"INITIALIZE":           1,
		"UNKNOWN_REQUEST":      2,
		"ICON_REQUEST":         3,
		"NAME_REQUEST":         4,
		"DESCRIPTION_REQUEST":  5,
		"CONTENT_REQUEST":      6,
		"DATA_PROCESS_REQUEST": 7,
		"SIGN_DATA_REQUEST":    8,
	}
)

func (x MessageType) Enum() *MessageType {
	p := new(MessageType)
	*p = x
	return p
}

//todo = decide to use?
type Action int32

const (
	Action_Container  Action = 0
	Action_Containers Action = 1
	Action_Object     Action = 2
	Action_Objects    Action = 3
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "Container",
		1: "Containers",
		2: "Object",
		3: "Objects",
	}
	Action_value = map[string]int32{
		"Container":  0,
		"Containers": 1,
		"Object":     2,
		"Objects":    3,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

type PluginInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Author      string `protobuf:"bytes,3,opt,name=author,proto3" json:"author,omitempty"`
	Version     string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	PluginId    string `protobuf:"bytes,5,opt,name=pluginId,proto3" json:"pluginId,omitempty"`
}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *PluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PluginInfo) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginInfo) GetPluginId() string {
	if x != nil {
		return x.PluginId
	}
	return ""
}

// The message structure for basic communication
type DataMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string      `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	Action string      `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	Type   MessageType `protobuf:"varint,3,opt,name=type,proto3,enum=interop.MessageType" json:"type,omitempty"`
	Text   string      `protobuf:"bytes,4,opt,name=text,proto3" json:"text,omitempty"`
	Data   []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataMessage) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DataMessage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataMessage) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DataMessage) GetType() MessageType {
	if x != nil {
		return x.Type
	}
	return MessageType_DEFAULT
}

func (x *DataMessage) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DataMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// The message structure for stream processing
type DataStreamMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *DataStreamMessage) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *DataStreamMessage) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type LogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *LogRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *LogRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Element struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
}

func (x *Element) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *Element) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ElementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements []*Element `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty"`
}

func (x *ElementsResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ElementsResponse) GetElements() []*Element {
	if x != nil {
		return x.Elements
	}
	return nil
}

// The main service definition
// go:plugin type=plugin version=1
type PluginService interface {
	InitializePlugin(context.Context, *PluginInfo) (*PluginInfo, error)
	Request(context.Context, *DataMessage) (*DataMessage, error)
	PluginEvent(context.Context, *DataMessage) (*emptypb.Empty, error)
	ProcessDataStream(context.Context, *DataStreamMessage) (*DataStreamMessage, error)
}

// The host functions embedded into the plugin
// go:plugin type=host
type HostService interface {
	SignPayload(context.Context, *DataMessage) (*DataMessage, error)
	HostLog(context.Context, *LogRequest) (*emptypb.Empty, error)
	PluginEvent(context.Context, *DataMessage) (*emptypb.Empty, error)
	Containers(context.Context, *emptypb.Empty) (*ElementsResponse, error)
	Container(context.Context, *Element) (*Element, error)
	Objects(context.Context, *emptypb.Empty) (*ElementsResponse, error)
	Object(context.Context, *Element) (*Element, error)
}
